/**
 * Leap Play
 * Learn more at https://www.leap-play.com
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreatedSession', 'model/RequestCreateStation', 'model/RequestNewStationSession', 'model/RequestSessionUpdate', 'model/RequestSetStationPassword', 'model/RequestStationMode', 'model/RequestStationQrCode', 'model/RequestStationSettings', 'model/SessionLog', 'model/StationCurrentState', 'model/StationSettings', 'model/StoppedSession', 'model/UpdatedSession'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreatedSession'), require('../model/RequestCreateStation'), require('../model/RequestNewStationSession'), require('../model/RequestSessionUpdate'), require('../model/RequestSetStationPassword'), require('../model/RequestStationMode'), require('../model/RequestStationQrCode'), require('../model/RequestStationSettings'), require('../model/SessionLog'), require('../model/StationCurrentState'), require('../model/StationSettings'), require('../model/StoppedSession'), require('../model/UpdatedSession'));
  } else {
    // Browser globals (root is window)
    if (!root.LeapplayJsClient) {
      root.LeapplayJsClient = {};
    }
    root.LeapplayJsClient.StationsApi = factory(root.LeapplayJsClient.ApiClient, root.LeapplayJsClient.CreatedSession, root.LeapplayJsClient.RequestCreateStation, root.LeapplayJsClient.RequestNewStationSession, root.LeapplayJsClient.RequestSessionUpdate, root.LeapplayJsClient.RequestSetStationPassword, root.LeapplayJsClient.RequestStationMode, root.LeapplayJsClient.RequestStationQrCode, root.LeapplayJsClient.RequestStationSettings, root.LeapplayJsClient.SessionLog, root.LeapplayJsClient.StationCurrentState, root.LeapplayJsClient.StationSettings, root.LeapplayJsClient.StoppedSession, root.LeapplayJsClient.UpdatedSession);
  }
}(this, function(ApiClient, CreatedSession, RequestCreateStation, RequestNewStationSession, RequestSessionUpdate, RequestSetStationPassword, RequestStationMode, RequestStationQrCode, RequestStationSettings, SessionLog, StationCurrentState, StationSettings, StoppedSession, UpdatedSession) {
  'use strict';

  /**
   * Stations service.
   * @module api/StationsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new StationsApi. 
   * @alias module:api/StationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Creates a Station (Auth)
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestCreateStation} opts.createStation Create Station Dto
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StationSettings} and HTTP response
     */
    this.createStationWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['createStation'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['application/json'];
      var returnType = StationSettings;

      return this.apiClient.callApi(
        '/api/v1/stations', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a Station (Auth)
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestCreateStation} opts.createStation Create Station Dto
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StationSettings}
     */
    this.createStation = function(opts) {
      return this.createStationWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets closed Sessions from all stations (Auth)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.take Entries to return (default to 50)
     * @param {Number} opts.skip Entries to skip (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SessionLog>} and HTTP response
     */
    this.getSessionLogsAllWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'take': opts['take'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SessionLog];

      return this.apiClient.callApi(
        '/api/v1/stations/sessions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets closed Sessions from all stations (Auth)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.take Entries to return (default to 50)
     * @param {Number} opts.skip Entries to skip (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SessionLog>}
     */
    this.getSessionLogsAll = function(opts) {
      return this.getSessionLogsAllWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets closed Sessions (Auth)
     * @param {String} stationId Station Id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.take Entries to return (default to 50)
     * @param {Number} opts.skip Entries to skip (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SessionLog>} and HTTP response
     */
    this.getSessionLogsByStationIdWithHttpInfo = function(stationId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling getSessionLogsByStationId");
      }


      var pathParams = {
        'stationId': stationId
      };
      var queryParams = {
        'take': opts['take'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SessionLog];

      return this.apiClient.callApi(
        '/api/v1/stations/{stationId}/sessions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets closed Sessions (Auth)
     * @param {String} stationId Station Id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.take Entries to return (default to 50)
     * @param {Number} opts.skip Entries to skip (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SessionLog>}
     */
    this.getSessionLogsByStationId = function(stationId, opts) {
      return this.getSessionLogsByStationIdWithHttpInfo(stationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the Settings of all Stations (Auth)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/StationSettings>} and HTTP response
     */
    this.getSettingsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [StationSettings];

      return this.apiClient.callApi(
        '/api/v1/stations/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets the Settings of all Stations (Auth)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/StationSettings>}
     */
    this.getSettings = function() {
      return this.getSettingsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the Settings of an Station (Auth)
     * @param {String} stationId Station Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StationSettings} and HTTP response
     */
    this.getSettingsByStationIdWithHttpInfo = function(stationId) {
      var postBody = null;

      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling getSettingsByStationId");
      }


      var pathParams = {
        'stationId': stationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StationSettings;

      return this.apiClient.callApi(
        '/api/v1/stations/{stationId}/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the Settings of an Station (Auth)
     * @param {String} stationId Station Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StationSettings}
     */
    this.getSettingsByStationId = function(stationId) {
      return this.getSettingsByStationIdWithHttpInfo(stationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the Station&#39;s State (Auth)
     * @param {String} stationId Station Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StationCurrentState} and HTTP response
     */
    this.getStateWithHttpInfo = function(stationId) {
      var postBody = null;

      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling getState");
      }


      var pathParams = {
        'stationId': stationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StationCurrentState;

      return this.apiClient.callApi(
        '/api/v1/stations/{stationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the Station&#39;s State (Auth)
     * @param {String} stationId Station Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StationCurrentState}
     */
    this.getState = function(stationId) {
      return this.getStateWithHttpInfo(stationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets Collection of Station States (Auth)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.networkStateFilter Optional Network State Filter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/StationCurrentState>} and HTTP response
     */
    this.getStatesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'networkStateFilter': opts['networkStateFilter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [StationCurrentState];

      return this.apiClient.callApi(
        '/api/v1/stations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Gets Collection of Station States (Auth)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.networkStateFilter Optional Network State Filter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/StationCurrentState>}
     */
    this.getStates = function(opts) {
      return this.getStatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a Session (Auth)
     * @param {String} stationId Station Id
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestNewStationSession} opts.createSessionRequest New Session Request Dto
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedSession} and HTTP response
     */
    this.sessionCreateWithHttpInfo = function(stationId, opts) {
      opts = opts || {};
      var postBody = opts['createSessionRequest'];

      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling sessionCreate");
      }


      var pathParams = {
        'stationId': stationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['application/json'];
      var returnType = CreatedSession;

      return this.apiClient.callApi(
        '/api/v1/stations/{stationId}/sessions', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a Session (Auth)
     * @param {String} stationId Station Id
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestNewStationSession} opts.createSessionRequest New Session Request Dto
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatedSession}
     */
    this.sessionCreate = function(stationId, opts) {
      return this.sessionCreateWithHttpInfo(stationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stops the running Session (Auth)
     * @param {String} stationId Station Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StoppedSession} and HTTP response
     */
    this.sessionStopWithHttpInfo = function(stationId) {
      var postBody = null;

      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling sessionStop");
      }


      var pathParams = {
        'stationId': stationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StoppedSession;

      return this.apiClient.callApi(
        '/api/v1/stations/{stationId}/sessions/current/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Stops the running Session (Auth)
     * @param {String} stationId Station Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StoppedSession}
     */
    this.sessionStop = function(stationId) {
      return this.sessionStopWithHttpInfo(stationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the running Session. (Auth)
     * @param {String} stationId Station Id
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestSessionUpdate} opts.updateSessionRequest The Update Request Dto
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdatedSession} and HTTP response
     */
    this.sessionUpdateWithHttpInfo = function(stationId, opts) {
      opts = opts || {};
      var postBody = opts['updateSessionRequest'];

      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling sessionUpdate");
      }


      var pathParams = {
        'stationId': stationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['application/json'];
      var returnType = UpdatedSession;

      return this.apiClient.callApi(
        '/api/v1/stations/{stationId}/sessions/current/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates the running Session. (Auth)
     * @param {String} stationId Station Id
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestSessionUpdate} opts.updateSessionRequest The Update Request Dto
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdatedSession}
     */
    this.sessionUpdate = function(stationId, opts) {
      return this.sessionUpdateWithHttpInfo(stationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the Settings for an Station (Auth)
     * @param {String} stationId Station Id
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestStationSettings} opts.setSettingsRequest Settings Dto
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.setSettingsWithHttpInfo = function(stationId, opts) {
      opts = opts || {};
      var postBody = opts['setSettingsRequest'];

      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling setSettings");
      }


      var pathParams = {
        'stationId': stationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/stations/{stationId}/settings', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sets the Settings for an Station (Auth)
     * @param {String} stationId Station Id
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestStationSettings} opts.setSettingsRequest Settings Dto
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.setSettings = function(stationId, opts) {
      return this.setSettingsWithHttpInfo(stationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the Operation Mode (Auth)
     * @param {String} stationId Station Id
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestStationMode} opts.setModeRequest The Operation Mode
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.setStationModeWithHttpInfo = function(stationId, opts) {
      opts = opts || {};
      var postBody = opts['setModeRequest'];

      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling setStationMode");
      }


      var pathParams = {
        'stationId': stationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/stations/{stationId}/settings/mode', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sets the Operation Mode (Auth)
     * @param {String} stationId Station Id
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestStationMode} opts.setModeRequest The Operation Mode
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.setStationMode = function(stationId, opts) {
      return this.setStationModeWithHttpInfo(stationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Changes the Password (Auth)
     * @param {String} stationId Station Id
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestSetStationPassword} opts.setPasswordRequest New Password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.setStationPasswordWithHttpInfo = function(stationId, opts) {
      opts = opts || {};
      var postBody = opts['setPasswordRequest'];

      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling setStationPassword");
      }


      var pathParams = {
        'stationId': stationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/stations/{stationId}/settings/password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Changes the Password (Auth)
     * @param {String} stationId Station Id
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestSetStationPassword} opts.setPasswordRequest New Password
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.setStationPassword = function(stationId, opts) {
      return this.setStationPasswordWithHttpInfo(stationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sets the QrCode (Auth)
     * @param {String} stationId Station Id
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestStationQrCode} opts.setQrCodeRequest QrCode
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.setStationQrCodeWithHttpInfo = function(stationId, opts) {
      opts = opts || {};
      var postBody = opts['setQrCodeRequest'];

      // verify the required parameter 'stationId' is set
      if (stationId === undefined || stationId === null) {
        throw new Error("Missing the required parameter 'stationId' when calling setStationQrCode");
      }


      var pathParams = {
        'stationId': stationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/stations/{stationId}/settings/qrcode', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Sets the QrCode (Auth)
     * @param {String} stationId Station Id
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestStationQrCode} opts.setQrCodeRequest QrCode
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.setStationQrCode = function(stationId, opts) {
      return this.setStationQrCodeWithHttpInfo(stationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
