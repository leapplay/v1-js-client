/**
 * Leap Play
 * Learn more at https://www.leap-play.com
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessToken', 'model/LoginResponse', 'model/RequestLoginModel', 'model/RequestTokenRefresh'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccessToken'), require('../model/LoginResponse'), require('../model/RequestLoginModel'), require('../model/RequestTokenRefresh'));
  } else {
    // Browser globals (root is window)
    if (!root.LeapplayJsClient) {
      root.LeapplayJsClient = {};
    }
    root.LeapplayJsClient.AuthApi = factory(root.LeapplayJsClient.ApiClient, root.LeapplayJsClient.AccessToken, root.LeapplayJsClient.LoginResponse, root.LeapplayJsClient.RequestLoginModel, root.LeapplayJsClient.RequestTokenRefresh);
  }
}(this, function(ApiClient, AccessToken, LoginResponse, RequestLoginModel, RequestTokenRefresh) {
  'use strict';

  /**
   * Auth service.
   * @module api/AuthApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AuthApi. 
   * @alias module:api/AuthApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Receive an Access and Refresh Token
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestLoginModel} opts.loginRequest Login Request Dto
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoginResponse} and HTTP response
     */
    this.loginWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['loginRequest'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['application/json'];
      var returnType = LoginResponse;

      return this.apiClient.callApi(
        '/api/v1/auth/login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Receive an Access and Refresh Token
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestLoginModel} opts.loginRequest Login Request Dto
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoginResponse}
     */
    this.login = function(opts) {
      return this.loginWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Invalidate the Refresh token (Auth)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.logoutWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/auth/logout', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Invalidate the Refresh token (Auth)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.logout = function() {
      return this.logoutWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Receive a new Access token
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestTokenRefresh} opts.requestTokenRefresh Refresh Token Dto
     * @param {String} opts.authorization Any previous Access Token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccessToken} and HTTP response
     */
    this.refreshTokenWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['requestTokenRefresh'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['application/json'];
      var returnType = AccessToken;

      return this.apiClient.callApi(
        '/api/v1/auth/refreshtoken', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Receive a new Access token
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestTokenRefresh} opts.requestTokenRefresh Refresh Token Dto
     * @param {String} opts.authorization Any previous Access Token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccessToken}
     */
    this.refreshToken = function(opts) {
      return this.refreshTokenWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
